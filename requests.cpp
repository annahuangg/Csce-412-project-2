#include <string>
#include <cstdlib>
#include <ctime>
#include <sstream>
#include <queue>

using namespace std;

/// @brief requestsData is a struct that contains data for each request
struct requestsData {
	/// @brief contains the data in the request
	std::string data;

	/// constructor for struct requestsData that initiailzes data to empty string
	requestsData() : data("") {}
};

/// @brief a class that contains attributes for each request
class requests {
	public:
		/// @brief IP Address for in
		std::string ipIn;

		/// @brief IP Address for out
		std::string ipOut;

		/// @brief time allotted for request
		int reqTime;

		/// @brief declare request struct
		requestsData data;
		
	/// @brief default constructor for requests
	requests() {}

	/// @brief construct request given currTime and maxTime
	/// @param currTime track current number of clock cycles
	/// @param maxTime maximum number of clock cycles
	requests(int currTime, int maxTime) : ipIn(randIpAddr()), ipOut(randIpAddr()), reqTime(generateRequestTime(currTime, maxTime)), data(requestsData()) {}

	/// @return generates random IP address
	std::string randIpAddr() {
		/// @brief THIS WAS GENERATED BY CHATGPT: A method to randomly generate an IP address
		stringstream ss;
		for (int i = 0; i < 4; i++) {
			int num = rand() % 256;
			ss << num;
			if (i < 3) {
				ss << ".";
			}
		}
        return ss.str();
	}

	/// @return randomy generates amount of clock cycles taken to complete request
	int generateRequestTime(int min, int max) {
		/// @brief THIS WAS GENERATED BY CHATGPT: A method to randomly generate the time a Request takes to process. 
		/// The process time time will be less than or equal to the amount of clock cycles left.

		static const double fraction = 1.0 / (RAND_MAX + 1.0);  // static used for efficiency, so we only calculate this value once
		// evenly distribute the random number across our range
		return min + static_cast<int>((max - min + 1) * (rand() * fraction));
	}
};